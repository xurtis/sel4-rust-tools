# CMake rules for integrating with Rust crates using cargo

cmake_minimum_required(VERSION 3.17.2)

# Set the global location for the directory containing rust targets
set(
	CARGO_TARGET_DIR
	"${CMAKE_CURRENT_LIST_DIR}/targets"
	CACHE
	INTERNAL
	"The directory for the rust target configurations"
	FORCE
)

# Set the rust target triple
set(
	CARGO_TARGET_TRIPLE
	"${KernelSel4Arch}-sel4-none"
	CACHE
	INTERNAL
	"The target triple to use for Rust builds with cargo"
	FORCE
)

# The CargoCrate function declares a Rust crate that can be used to
# generate library and binary dependecies.
# Arguments:
#   LIBRARY: Kind of library generated
#     - "rlib" (default) the crate generates a Rust library
#     - "static" the crate generates a C static library
#     - "dynamic" the crate generates a dynamic C library
#   TOML: Path to the Cargo.toml (if not in the current directory)
# List Arguments:
#   BINARIES: The list of binaries generated by this crate
#   DEPENDS: Targets upon which this crate depends
#   ENVIRON: List of environment variables set for the compiler
function(CargoCrate crate_name)
	cmake_parse_arguments(
		PARSE_ARGV 1
		CARGO
		""
		"LIBRARY;TOML"
		"BINARIES;DEPENDS;ENV"
	)

	if(NOT "${CARGO_UNPARSED_ARGUMENTS}" STREQUAL "")
		message(FATAL_ERROR "Unknown arguments to CargoCrate: ${CARGO_UNPARSED_ARGUMENTS}")
    endif()

	if("${CARGO_TOML}" STREQUAL "")
		set(CARGO_TOML "Cargo.toml")
	endif()
	file(RELATIVE_PATH CARGO_TOML_REL "${CMAKE_C}" "${CARGO_TOML}")

	if(NOT (
		"${CARGO_LIBRARY}" STREQUAL "" OR
		"${CARGO_LIBRARY}" STREQUAL "rlib" OR
		"${CARGO_LIBRARY}" STREQUAL "dynamic" OR
		"${CARGO_LIBRARY}" STREQUAL "static"
	))
		message(FATAL_ERROR "Invalid LIBRARY for CargoCrate: ${CARGO_LIBRARY}")
	endif()

	# Find cargo
	find_program(CARGO_TOOL cargo)
	if("${CARGO_TOOL}" STREQUAL "CARGO_TOOL-NOTFOUND")
        message(
			FATAL_ERROR
			"Could not find tool cargo. "
			"Install with https://rustup.rs")
    endif()

	# Generate rustc flags
	foreach(DEPENDENCY ${CARGO_DEPENDS})
		get_target_property(DEP_RLIB "${DEPENDENCY}" "CRATE_LIB")
		if("${DEP_RLIB}" STREQUAL "rlib")
			# Dependecy is a rust library
			list(APPEND RUSTC_FLAGS "--extern" "${DEPENDENCY}=$<TARGET_FILE:${DEPENDENCY}>")
		else()
			# Dependecy is a native static or shared library
			list(
				APPEND
				RUSTC_FLAGS
				"-C" "link-arg=-Wl,-L$<TARGET_FILE_DIR:${DEPENDENCY}>"
				"-C" "link-arg=-Wl,-l:$<TARGET_FILE_NAME:${DEPENDENCY}>"
			)
		endif()
	endforeach()

	# Determine the build directory
	if(NOT ${KernelDebugBuild} AND NOT ${RUST_DEBUG})
		list(APPEND CARGO_FLAGS "--release")
		set(BUILD_SUBDIR "release")
	else()
		set(BUILD_SUBDIR "debug")
	endif()
	set(FULL_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CARGO_TARGET_TRIPLE}/${BUILD_SUBDIR}")

	# Determine outputs
	if(NOT "${CARGO_LIBRARY}" STREQUAL "")
		list(APPEND CARGO_FLAGS "--lib")
		if("${CARGO_LIBRARY}" STREQUAL "rlib")
			set(APPEND LIB_NAME "lib${crate_name}.rlib")
		elseif("${CARGO_LIBRARY}" STREQUAL "static")
			set(APPEND LIB_NAME "lib${crate_name}.a")
		elseif("${CARGO_LIBRARY}" STREQUAL "dynamic")
			set(APPEND LIB_NAME "lib${crate_name}.so")
		endif()
		list(APPEND CRATE_BYPRODUCTS "${FULL_BUILD_DIR}/${LIB_NAME}")
	endif()
	foreach(BINARY ${CARGO_BINARIES})
		list(APPEND CARGO_FLAGS "--bin" "${BINARY}")
		list(APPEND CRATE_BYPRODUCTS "${FULL_BUILD_DIR}/${BINARY}")
	endforeach()

	# Add target path to environment variables
	list(APPEND CARGO_ENVIRON "RUST_TARGET_PATH=${CARGO_TARGET_DIR}")

	# Add target to build crate
	add_custom_target(
		${crate_name}_crate
		BYPRODUCTS ${CRATE_BYPRODUCTS}
		${USES_TERMINAL_DEBUG}
		DEPENDS ${CARGO_DEPENDS}
		COMMAND
			${CMAKE_COMMAND}
				-E env
				RUSTFLAGS="${RUSTC_FLAGS}"
				${CARGO_ENVIRON} ${CARGO_TOOL} build
				${CARGO_FLAGS}
				--lib
				--manifest-path "${CARGO_TOML_REL}"
				--target "${CARGO_TARGET_TRIPLE}"
				--target-dir "${CMAKE_CURRENT_BINARY_DIR}"
	)

	# Generate targets
	if(NOT "${CARGO_LIBRARY}" STREQUAL "")
		if("${CARGO_LIBRARY}" STREQUAL "rlib")
			add_library(${crate_name} UNKNOWN IMPORTED GLOBAL)
		elseif("${CARGO_LIBRARY}" STREQUAL "static")
			add_library(${crate_name} STATIC IMPORTED GLOBAL)
		elseif("${CARGO_LIBRARY}" STREQUAL "dynamic")
			add_library(${crate_name} SHARED IMPORTED GLOBAL)
		endif()
		set_property(
			TARGET ${crate_name}
			PROPERTY IMPORTED_LOCATION
			"${FULL_BUILD_DIR}/${LIB_NAME}"
		)
		set_property(
			TARGET ${crate_name}
			PROPERTY CRATE_LIB
			"${CARGO_LIBRARY}"
		)
		add_dependencies(${crate_name} ${crate_name}_crate)
	endif()

	foreach(BINARY ${CARGO_BINARIES})
		add_executable(${BINARY} IMPORTED GLOBAL)
		set_property(
			TARGET ${BINARY}
			PROPERTY IMPORTED_LOCATION
			"${FULL_BUILD_DIR}/${BINARY}"
		)
		add_dependencies(${BINARY} ${crate_name}_crate)
	endforeach()

	# Add targets for all binaries
	# (Make sure to re-link binaries with explicit LINK_FLAGS so they
	# can be used for the root server)
endfunction()

# Add a target for the rust sysroot

